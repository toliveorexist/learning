{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","_ref","robots","cardComponent","map","user","i","components_Card","key","SearchBox","seatrhfield","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c7db3e80.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    const {name, email, id } = props;\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/'${id}'?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n        \n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots}) => {\n    const cardComponent = robots.map((user, i) => {\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\n    })\n    return (\n     <div>\n    {cardComponent}\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({seatrhfield, searchChange}) => {\n    return (\n        <div>\n        <input\n        aria-label='Search Robots'\n        type='search' placeholder='search robots'\n        onChange={searchChange}\n    />\n        </div>\n    );\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n    <div style ={{ overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\n     {props.children}\n</div>\n        );\n}\n\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n    \n    componentDidCatch(error, info) {\n        this.setState({ hasError: true})\n    }\n    \n    render() {\n        if(this.state.hasError) {\n            return <h1>Ooops. That is not good </h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n    constructor() {\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n    \n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.state.count !== nextState.count){\n            return true\n        }\n        return false\n    }\n    updateCount = () => {\n        this.setState(state => {\nreturn { count: this.state.count + 1}\n        })\n    }\n    \n    render() {\n        return ( <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count} </button>\n                                                           \n        );\n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\n\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return true;\n    }\n    \n    render() {\n        return (\n            <div> \n                \n                <h1 className='f1'>RoboFriends</h1>\n                <CounterButton color={'red'} />\n            </div>\n            );\n    }\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\n\n\nimport { setSearchField , requestRobots} from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n    componentDidMount(){\n        this.props.onRequestRobots();\n    }\n    \n  \n    render(){\n        \n        const { searchField, onSearchChange, robots, isPending } = this.props;\n            const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n\n    if ( isPending){\n        return <h1>Loading</h1>\n    } else {\n    return (\n       <div className='tc'>\n            <Header />\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n        <ErrorBoundry>\n        <CardList robots={filteredRobots}/>\n        </ErrorBoundry>\n        </Scroll>\n        </div>\n    );\n    }\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js'\n\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots  = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => \n           response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from './constants.js'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n            case CHANGE_SEARCH_FIELD:\n                return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n                      }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false})\n        default:\n            return state;\n                      }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n   <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}